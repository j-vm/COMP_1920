/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. parser.jj */
/*@egen*/options
{
       LOOKAHEAD=1;
}

PARSER_BEGIN(MicroblazeParser)
public class MicroblazeParser/*@bgen(jjtree)*/implements MicroblazeParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTMicroblazeParserState jjtree = new JJTMicroblazeParserState();

/*@egen*/
       public static void main(String args[]) throws ParseException {
              System.out.println("Parser for Microblaze processor");
              MicroblazeParser myCalc = new MicroblazeParser(System.in);
              SimpleNode root = myCalc.Expression(); // returns reference to root node
              root.dump(""); // prints the tree on the screen
       }

}

PARSER_END(MicroblazeParser)

SKIP :
{
       " " | "," | "\r"
}
TOKEN:
{
         < ADDRESS: "0x"(["0"-"9", "a"-"f"])+>
       | < INSTRUCTION_A1: "br" | "brd" | "bra" | "brad">
       | < INSTRUCTION_A2: "tneagetd" | "tnaputd" | "tnecagetd" | "tncaputd" | "flt" | "fint" | "fsqrt" | "dbl" | "dlong" | "dsqrt" | "sra" | "sext8" | "sext16" | "sextl32" | "clz" | "swapb" | "clz" | "swaph" | "wic" | "wdc" | "wdc.flush" | "wdc.clear" | "wdc.clear.ea" | "brld" | "brald" | "brk" | "beq " | "bne" | "blt" | "ble" | "bgt" | "bge" | "beqd" | "bned" | "bltd" | "bled" | "bgtd" | "bged">
       | < INSTRUCTION_A3: "add" | "rsub" | "addc" | "rsubc" | "addk" | "rsubk" | "cmp" | "cmpu" | "addkc" | "rsubkc" | "mul" | "mulh" | "mulhu" | "mulhsu" | "bsrl" | "bsra" | "bsll" | "idiv" | "idivu" | "fadd" | "frsub" | "fmul" | "fdiv" | "fcmp.un" | "fcmp.lt" | "fcmp.eq" | "fcmp.le" | "fcmp.gt" | "fcmp.ne" | "fcmp.ge" | "dadd" | "drsub" | "dmul" | "ddiv" | "dcmp.un" | "dcmp.lt" | "dcmp.eq" | "dcmp.le" | "dcmp.gt" | "dcmp.ne" | "dcmp.ge" | "or" | "pcmpbf" | "and" | "xor" | "pcmpeq" | "andn" | "pcmpne" | "lbu" | "lbur" | "lbuea" | "lhu" | "lhur" | "lhuea" | "lw" | "lwr" | "lwx" | "lwea" | "ll" | "llr" | "sb" | "sbr" | "sbea" | "sh" | "shr" | "shea" | "sw" | "swr" | "swx" | "swea" | "sl" | "slr">
       | < INSTRUCTION_B1: "imm" | "imml" | "bri" | "mbar" | "brid" | "brai" | "braid">
       | < INSTRUCTION_B2: "msrclr" | "msrset" | "rtsd" | "rtid" | "rtbd" | "rted" | "brlid" | "bralid" | "brki" | "beqi" | "bnei" | "blti" | "blei" | "bgti" | "bgei" | "beqid" | "bneid" | "bltid" | "bleid" | "bgtid" | "bgeid">
       | < INSTRUCTION_B3: "addi" | "rsubi" | "addic" | "rsubic" | "addik" | "rsubik" | "addikc" | "rsubikc" | "muli" | "bsrli" | "bsrai" | "bslli" | "ori" | "andi" | "xori" | "andni" | "lbui" | "lhui" | "lwi" | "lli" | "sbi" | "sji" | "swi" | "sli">
       | < REGISTER: "r"(["0"-"9"]|["1","2"]["0"-"9"]|"3"["0", "1"]) >
       | < LITERAL: ("-")?(["0"-"9"])+ >
       | < LF: ("\r")?"\n" >
}
SimpleNode Expression(): {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
       try {
/*@egen*/
       FullTrace() <LF> <EOF>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
       } catch (Throwable jjte000) {
         if (jjtc000) {
           jjtree.clearNodeScope(jjtn000);
           jjtc000 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte000 instanceof RuntimeException) {
           throw (RuntimeException)jjte000;
         }
         if (jjte000 instanceof ParseException) {
           throw (ParseException)jjte000;
         }
         throw (Error)jjte000;
       } finally {
         if (jjtc000) {
           jjtree.closeNodeScope(jjtn000, true);
         }
       }
/*@egen*/ // Java code inside brackets
}

void FullTrace()      : {}
{
        (Line()<LF>)+
}
void Line()      : {Token t;}
{
        t=<ADDRESS>
        [
            A1(t.image) |
            A2(t.image) |
            A3(t.image) |
            B1(t.image) |
            B2(t.image) |
            B3(t.image) 
        ]
}


void A1(String address)    : {/*@bgen(jjtree) A1 */
                              SimpleNode jjtn000 = new SimpleNode(JJTA1);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/jjtn000.setAddress(address); Token instruction; Token register1;}
{/*@bgen(jjtree) A1 */
    try {
/*@egen*/
    instruction=<INSTRUCTION_A1>{jjtn000.setInstruction(instruction.image);}
    register1=<REGISTER>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{jjtn000.setRegister1(register1.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
    
}
void A2(String address)    : {/*@bgen(jjtree) A2 */
                              SimpleNode jjtn000 = new SimpleNode(JJTA2);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/jjtn000.setAddress(address); Token instruction; Token register1; Token register2;}
{/*@bgen(jjtree) A2 */
    try {
/*@egen*/
    instruction=<INSTRUCTION_A2>{jjtn000.setInstruction(instruction.image);}
    register1=<REGISTER>{jjtn000.setRegister1(register1.image);}
    register2=<REGISTER>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{jjtn000.setRegister2(register2.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}
void A3(String address)    : {/*@bgen(jjtree) A3 */
                              SimpleNode jjtn000 = new SimpleNode(JJTA3);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/jjtn000.setAddress(address); Token instruction; Token register1; Token register2; Token register3;}
{/*@bgen(jjtree) A3 */
    try {
/*@egen*/
    instruction=<INSTRUCTION_A3>{jjtn000.setInstruction(instruction.image);}
    register1=<REGISTER>{jjtn000.setRegister1(register1.image);}
    register2=<REGISTER>{jjtn000.setRegister2(register2.image);}
    register3=<REGISTER>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/{jjtn000.setRegister3(register3.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}
void B1(String address)    : {/*@bgen(jjtree) B1 */
                              SimpleNode jjtn000 = new SimpleNode(JJTB1);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/jjtn000.setAddress(address); Token instruction; Token literal;}
{/*@bgen(jjtree) B1 */
    try {
/*@egen*/
    instruction=<INSTRUCTION_B1>{jjtn000.setInstruction(instruction.image);}
    literal=<LITERAL>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/{jjtn000.setLiteral(literal.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}
void B2(String address)    : {/*@bgen(jjtree) B2 */
                              SimpleNode jjtn000 = new SimpleNode(JJTB2);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/jjtn000.setAddress(address); Token instruction; Token register1; Token literal;}
{/*@bgen(jjtree) B2 */
    try {
/*@egen*/
    instruction=<INSTRUCTION_B2>{jjtn000.setInstruction(instruction.image);}
    register1=<REGISTER>{jjtn000.setRegister1(register1.image);}
    literal=<LITERAL>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/{jjtn000.setLiteral(literal.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}
void B3(String address)    : {/*@bgen(jjtree) B3 */
                              SimpleNode jjtn000 = new SimpleNode(JJTB3);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/jjtn000.setAddress(address); Token instruction; Token register1; Token register2; Token literal;}
{/*@bgen(jjtree) B3 */
    try {
/*@egen*/
    instruction=<INSTRUCTION_B3>{jjtn000.setInstruction(instruction.image);}
    register1=<REGISTER>{jjtn000.setRegister1(register1.image);}
    register2=<REGISTER>{jjtn000.setRegister2(register2.image);}
    literal=<LITERAL>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/{jjtn000.setLiteral(literal.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}