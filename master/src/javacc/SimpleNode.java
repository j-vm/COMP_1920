/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 6.0 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package javacc;


public
class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected MicroblazeParser parser;

  private String address;
  private String instruction;
  private String register1;
  private String register2;
  private String register3;
  private String literal;

  public String getAddress() {
    return this.address;
  }

  public void setAddress(String address) {
    this.address = address;
  }

  public String getInstruction() {
    return this.instruction;
  }

  public void setInstruction(String instruction) {
    this.instruction = instruction;
  }

  public String getRegister1() {
    return this.register1;
  }

  public void setRegister1(String register1) {
    this.register1 = register1;
  }

  public String getRegister2() {
    return this.register2;
  }

  public void setRegister2(String register2) {
    this.register2 = register2;
  }

  public String getRegister3() {
    return this.register3;
  }

  public void setRegister3(String register3) {
    this.register3 = register3;
  }

  public String getLiteral() {
    return this.literal;
  }

  public void setLiteral(String literal) {
    this.literal = literal;
  }

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(MicroblazeParser p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() {
    return MicroblazeParserTreeConstants.jjtNodeName[id] 
      + (this.address != null ? ("(address=" + this.address + ")") : "") 
      + (this.instruction != null ? ("(instruction=" + this.instruction + ")") : "")
      + (this.register1 != null ? ("(register 1=" + this.register1 + ")") : "")
      + (this.register2 != null ? ("(register 2=" + this.register2 + ")") : "")
      + (this.register3 != null ? ("(register 3=" + this.register3 + ")") : "")
      + (this.literal != null ? ("(literal=" + this.literal + ")") : "");
  }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }

  public int getId() {
    return id;
  }
}

/* JavaCC - OriginalChecksum=43af0900274ee13f8a79f7db89d255b5 (do not edit this line) */
